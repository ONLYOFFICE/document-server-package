#!/bin/bash
# postinst script for M4_ONLYOFFICE_VALUE
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

. /usr/share/debconf/confmodule

DIR="/var/www/M4_DS_PREFIX"
LOG_DIR="/var/log/M4_DS_PREFIX"
APP_DIR="/var/lib/M4_DS_PREFIX"
CONF_DIR="/etc/M4_DS_PREFIX"
EXAMPLE_CONFIG=${CONF_DIR}-example/local.json
JSON_BIN="$DIR-example/npm/json"
JSON_EXAMPLE="$JSON_BIN -I -q -f ${EXAMPLE_CONFIG}"

OLD_VERSION="$2"

create_local_configs(){
	for i in $EXAMPLE_CONFIG; do
		if [ -d $(dirname ${i}) -a ! -f ${i} ]; then
			echo {} > ${i}
		fi
  	done
}

read_saved_params(){
	db_get M4_ONLYOFFICE_VALUE/jwt-enabled || true
	JWT_ENABLED="$RET"
	db_get M4_ONLYOFFICE_VALUE/jwt-secret || true
	JWT_SECRET="${RET//select }"
	db_get M4_ONLYOFFICE_VALUE/jwt-header || true
	JWT_HEADER="$RET"
	if [ $JWT_ENABLED = "true" ] && [ -z $JWT_SECRET ]; then
		JWT_SECRET=$(cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 32)
		db_set M4_ONLYOFFICE_VALUE/jwt-secret $JWT_SECRET || true
	fi
}

save_jwt_params(){
  if [ -f "${EXAMPLE_CONFIG}" ]; then
    ${JSON_EXAMPLE} -e "if(this.server===undefined)this.server={};"
    ${JSON_EXAMPLE} -e "if(this.server.token===undefined)this.server.token={};"
    if [ "${JWT_ENABLED}" = "true" ] || [ "${JWT_ENABLED}" = "false" ]; then
      ${JSON_EXAMPLE} -e "if(this.server.token.enable===undefined)this.server.token.enable = ${JWT_ENABLED}"
    fi
    ${JSON_EXAMPLE} -e "if(this.server.token.secret===undefined)this.server.token.secret = '${JWT_SECRET}'"
    ${JSON_EXAMPLE} -e "if(this.server.token.authorizationHeader===undefined)this.server.token.authorizationHeader = '${JWT_HEADER}'"
  fi
}

setup_nginx(){
  DSE_CONF=$CONF_DIR-example/nginx/ds.conf

  if [ -d /etc/nginx/conf.d ] && [ ! -e /etc/nginx/conf.d/dse.conf ]; then
    if [ ! -e /etc/nginx/conf.d/ds.conf ]; then
	  ln -s $DSE_CONF /etc/nginx/conf.d/dse.conf
	else
	  mkdir -p $CONF_DIR/dse
	  if [ ! -e $CONF_DIR/dse/dse.conf ]; then
	    ln -s $DSE_CONF $CONF_DIR/dse/dse.conf
	  fi
	fi
  fi
		
  rm -f /etc/nginx/sites-enabled/default
}

case "$1" in
	configure)
		read_saved_params
		create_local_configs
		save_jwt_params

		setup_nginx

		mkdir -p "$LOG_DIR-example"
		mkdir -p "$APP_DIR-example/files"

		chown ds:ds -R "$LOG_DIR"
		chown ds:ds -R "$LOG_DIR-example"
		chown ds:ds -R "$APP_DIR"
		chown ds:ds -R "$APP_DIR-example"

		# restart dependent services
		if [ -z "$DS_DOCKER_INSTALLATION" ]; then
			#systemctl enable ds-example >/dev/null 2>&1
			#systemctl restart ds-example >/dev/null 2>&1

			service nginx restart >/dev/null 2>&1
		fi
		echo "Congratulations, the M4_COMPANY_NAME M4_PRODUCT_NAME-example has been installed successfully!"
	;;

	abort-upgrade|abort-remove|abort-deconfigure)
	;;
	
	triggered)
		:
	;;
	
	*)
		echo "postinst called with unknown argument \`$1'" >&2
		exit 1
	;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
