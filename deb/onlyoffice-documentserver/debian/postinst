#!/bin/sh
# postinst script for onlyoffice
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

. /usr/share/debconf/confmodule

DIR="/var/www/onlyoffice"
LOG_DIR="/var/log/onlyoffice"
APP_DIR="/var/lib/onlyoffice"
LOCAL_CONFIG="/etc/onlyoffice/documentserver/local.json"
EXAMPLE_CONFIG="/etc/onlyoffice/documentserver-example/local.json"
JSON="json -I -q -f $LOCAL_CONFIG"
JSON_EXAMPLE="json -q -f ${EXAMPLE_CONFIG}"

OLD_VERSION="$2"

DB_HOST=""
DB_USER=""
DB_PWD=""
DB_NAME=""

RABBITMQ_HOST=""
RABBITMQ_USER=""
RABBITMQ_PWD=""

REDIS_HOST=""

CLUSTER_MODE=""

create_local_configs(){
	for i in $LOCAL_CONFIG $EXAMPLE_CONFIG; do
		if [ ! -f ${i} ]; then
			echo {} > ${i}
		fi
  	done
}

read_saved_params(){
	db_get onlyoffice/db-host || true
	DB_HOST="$RET"
	db_get onlyoffice/db-user || true
	DB_USER="$RET"
	db_get onlyoffice/db-pwd || true
	DB_PWD="$RET"
	db_get onlyoffice/db-name || true
	DB_NAME="$RET"

	db_get onlyoffice/rabbitmq-host || true
	RABBITMQ_HOST="$RET"
	db_get onlyoffice/rabbitmq-user || true
	RABBITMQ_USER="$RET"
	db_get onlyoffice/rabbitmq-pwd || true
	RABBITMQ_PWD="$RET"

	db_get onlyoffice/redis-host || true
	REDIS_HOST="$RET"

	db_get onlyoffice/cluster-mode || true
	CLUSTER_MODE="$RET"

	db_get onlyoffice/jwt-enabled || true
	JWT_ENABLED="$RET"
	db_get onlyoffice/jwt-secret || true
	JWT_SECRET="$RET"
	db_get onlyoffice/jwt-header || true
	JWT_HEADER="$RET"
}
  
install_db(){
        CONNECTION_PARAMS="-h$DB_HOST -U$DB_USER -w"
        if [ -n "$DB_PWD" ]; then
                export PGPASSWORD=$DB_PWD
        fi

        PSQL="psql -q $CONNECTION_PARAMS"
        CREATEDB="createdb $CONNECTION_PARAMS"

	# test postgresql connection
	set +e
        $PSQL -c ";" &>/dev/null
        ERRCODE=$?
        if [ $ERRCODE -ne 0 ]; then
                service postgresql start &>/dev/null
                $PSQL -c ";" &>/dev/null || { echo "ERROR: can't connect to postgressql database"; exit 1; }
        fi
	set -e

        if ! $PSQL -lt | cut -d\| -f 1 | grep -qw $DB_NAME; then
                $CREATEDB $DB_NAME >/dev/null 2>&1
        fi

        if [ ! "$CLUSTER_MODE" = true ]; then
                $PSQL -d "$DB_NAME" -f "$DIR/documentserver/server/schema/postgresql/removetbl.sql" >/dev/null 2>&1
        fi
        $PSQL -d "$DB_NAME" -f "$DIR/documentserver/server/schema/postgresql/createdb.sql" >/dev/null 2>&1
}

save_db_params(){
  $JSON -e "if(this.services===undefined)this.services={};"
  $JSON -e "if(this.services.CoAuthoring===undefined)this.services.CoAuthoring={};"
  $JSON -e "if(this.services.CoAuthoring.sql===undefined)this.services.CoAuthoring.sql={};" >/dev/null 2>&1
  $JSON -e "this.services.CoAuthoring.sql.dbHost = '$DB_HOST'"
  $JSON -e "this.services.CoAuthoring.sql.dbName = '$DB_NAME'"
  $JSON -e "this.services.CoAuthoring.sql.dbUser = '$DB_USER'"
  $JSON -e "this.services.CoAuthoring.sql.dbPass = '$DB_PWD'"
}

save_rabbitmq_params(){
  $JSON -e "if(this.rabbitmq===undefined)this.rabbitmq={};"
  $JSON -e "this.rabbitmq.url = 'amqp://$RABBITMQ_USER:$RABBITMQ_PWD@$RABBITMQ_HOST'"
}

save_redis_params(){
  $JSON -e "if(this.services===undefined)this.services={};"
  $JSON -e "if(this.services.CoAuthoring===undefined)this.services.CoAuthoring={};"
  $JSON -e "if(this.services.CoAuthoring.redis===undefined)this.services.CoAuthoring.redis={};"
  $JSON -e "this.services.CoAuthoring.redis.host = '$REDIS_HOST'"
}

save_jwt_params(){
  ${JSON} -e "if(this.services===undefined)this.services={};"
  ${JSON} -e "if(this.services.CoAuthoring===undefined)this.services.CoAuthoring={};"
  ${JSON} -e "if(this.services.CoAuthoring.token===undefined)this.services.CoAuthoring.token={};"

  if [ "${JWT_ENABLED}" == "true" -o "${JWT_ENABLED}" == "false" ]; then
    ${JSON} -e "if(this.services.CoAuthoring.token.enable===undefined)this.services.CoAuthoring.token.enable={};"
    ${JSON} -e "if(this.services.CoAuthoring.token.enable.request===undefined)this.services.CoAuthoring.token.enable.request={};"
    ${JSON} -e "this.services.CoAuthoring.token.enable.browser = ${JWT_ENABLED}"
    ${JSON} -e "this.services.CoAuthoring.token.enable.request.inbox = ${JWT_ENABLED}"
    ${JSON} -e "this.services.CoAuthoring.token.enable.request.outbox = ${JWT_ENABLED}"
  fi
  
  ${JSON} -e "if(this.services.CoAuthoring.secret===undefined)this.services.CoAuthoring.secret={};"

  ${JSON} -e "if(this.services.CoAuthoring.secret.inbox===undefined)this.services.CoAuthoring.secret.inbox={};"
  ${JSON} -e "this.services.CoAuthoring.secret.inbox.string = '${JWT_SECRET}'"

  ${JSON} -e "if(this.services.CoAuthoring.secret.outbox===undefined)this.services.CoAuthoring.secret.outbox={};"
  ${JSON} -e "this.services.CoAuthoring.secret.outbox.string = '${JWT_SECRET}'"

  ${JSON} -e "if(this.services.CoAuthoring.secret.session===undefined)this.services.CoAuthoring.secret.session={};"
  ${JSON} -e "this.services.CoAuthoring.secret.session.string = '${JWT_SECRET}'"
  
  ${JSON} -e "if(this.services.CoAuthoring.token.inbox===undefined)this.services.CoAuthoring.token.inbox={};"
  ${JSON} -e "this.services.CoAuthoring.token.inbox.header = '${JWT_HEADER}'"

  ${JSON} -e "if(this.services.CoAuthoring.token.outbox===undefined)this.services.CoAuthoring.token.outbox={};"
  ${JSON} -e "this.services.CoAuthoring.token.outbox.header = '${JWT_HEADER}'"

  if [ -f "${EXAMPLE_CONFIG}" ]; then
    ${JSON_EXAMPLE} -e "if(this.server===undefined)this.server={};"
    ${JSON_EXAMPLE} -e "if(this.server.token===undefined)this.server.token={};"

    if [ "${JWT_ENABLED}" == "true" -o "${JWT_ENABLED}" == "false" ]; then
      ${JSON_EXAMPLE} -e "this.server.token.enable = ${JWT_ENABLED}"
    fi
    ${JSON_EXAMPLE} -e "this.server.token.secret = '${JWT_SECRET}'"
    ${JSON_EXAMPLE} -e "this.server.token.authorizationHeader = '${JWT_HEADER}'"
  fi
}

setup_nginx(){
  NGINX_CONF_DIR=/etc/onlyoffice/documentserver/nginx
  DS_CONF=$NGINX_CONF_DIR/onlyoffice-documentserver.conf.template
  DS_SSL_CONF=$NGINX_CONF_DIR/onlyoffice-documentserver-ssl.conf.template
  # OO_CONF=$NGINX_CONF_DIR/includes/onlyoffice-http.conf
  
  db_get onlyoffice/ds-port || true
  DS_PORT="$RET"
  
  # db_get onlyoffice/docservice-port || true
  # DOCSERVICE_PORT="$RET"
  
  # db_get onlyoffice/spellchecker-port || true
  # SPELLCHECKER_PORT="$RET"
  
  # db_get onlyoffice/example-port || true
  # EXAMPLE_PORT="$RET"
  
  sed 's/\(listen .*:\)\([0-9]\{2,5\}\b\)\( default_server\)\?\(;\)/\1'${DS_PORT}'\3\4/' -i $DS_CONF  

  # sed 's/{{DOCSERVICE_PORT}}/'${DOCSERVICE_PORT}'/'  -i $OO_CONF
  # sed 's/{{SPELLCHECKER_PORT}}/'${SPELLCHECKER_PORT}'/'  -i $OO_CONF
  # sed 's/{{EXAMPLE_PORT}}/'${EXAMPLE_PORT}'/'  -i $OO_CONF
}

case "$1" in
	configure)
		adduser --quiet --home "$DIR" --system --group onlyoffice

		# add nginx user to onlyoffice group to allow access nginx to onlyoffice log dir
		adduser --quiet www-data onlyoffice

		#install node modules
		npm list -g json >/dev/null 2>&1 || npm install -g json >/dev/null 2>&1

		create_local_configs
		read_saved_params
		install_db
		save_db_params
		save_rabbitmq_params
		save_redis_params
		save_jwt_params

		setup_nginx

		# modify permissions for onlyoffice files and folders
		mkdir -p "$LOG_DIR/documentserver/docservice"
		mkdir -p "$LOG_DIR/documentserver-example"
		mkdir -p "$LOG_DIR/documentserver/converter"
		mkdir -p "$LOG_DIR/documentserver/spellchecker"
		mkdir -p "$LOG_DIR/documentserver/metrics"
		mkdir -p "$LOG_DIR/documentserver/gc"

		mkdir -p "$APP_DIR/documentserver/App_Data"
		mkdir -p "$APP_DIR/documentserver/App_Data/cache/files"
		mkdir -p "$APP_DIR/documentserver/App_Data/docbuilder"

		mkdir -p "$DIR/Data"
		mkdir -p "$DIR/documentserver/fonts"
		mkdir -p "$DIR/documentserver-example/public/files"
		chown onlyoffice:onlyoffice -R "$DIR"

		# generate allfonts.js and thumbnail
		documentserver-generate-allfonts.sh true

		chown onlyoffice:onlyoffice -R "$LOG_DIR"
		chown onlyoffice:onlyoffice -R "$APP_DIR"

		# configure ngninx for onlyoffice
		rm -f /etc/nginx/sites-enabled/default
		mkdir -p /var/cache/nginx/onlyoffice/documentserver
		chown www-data:www-data /var/cache/nginx/onlyoffice/documentserver

		# call db_stop to prevent installation hang
		db_stop

		# restart dependent services
		service supervisor restart >/dev/null 2>&1
		service nginx restart >/dev/null 2>&1
		
		echo "Congratulations, the ONLYOFFICE DocumentServer has been installed successfully!"
	;;

	abort-upgrade|abort-remove|abort-deconfigure)
	;;

	*)
		echo "postinst called with unknown argument \`$1'" >&2
		exit 1
	;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
